package testcases;

import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import mycfg.CFEdge;
import mycfg.CFG;
import mycfg.CFGBasicBlockNode;
import mycfg.CFGDecisionNode;

import org.junit.Test;

import statement.Statement;
import tester.SymTest;
import tester.TestSequence;

import cfg.ICFEdge;
import cfg.ICFG;
import expression.AddExpression;
import expression.AndExpression;
import expression.ConcreteConstant;
import expression.EqualsExpression;
import expression.False;
import expression.GreaterThanExpression;
import expression.Input;
import expression.OrExpression;
import expression.True;
import expression.Variable;

public class TestMatlabExample {

	@Test
	public void testMatlabExample() throws Exception {

		// create CFG
		System.out.println("Test Case 1 Start\n\n");
		ICFG mCFG = null;
		CFGBasicBlockNode A = new CFGBasicBlockNode("A", null);
		CFGBasicBlockNode Y = new CFGBasicBlockNode("Y", null);
		mCFG = new CFG(A, Y);

		// constants
		ConcreteConstant constant1 = new ConcreteConstant(5, mCFG);
		ConcreteConstant constant2 = new ConcreteConstant(10, mCFG);
		ConcreteConstant constant3 = new ConcreteConstant(15, mCFG);
		ConcreteConstant constant4 = new ConcreteConstant(20, mCFG);
		ConcreteConstant constant5 = new ConcreteConstant(25, mCFG);
		ConcreteConstant constant7 = new ConcreteConstant(35, mCFG);
		ConcreteConstant constant8 = new ConcreteConstant(40, mCFG);

		ConcreteConstant trueconstant = new ConcreteConstant(1, mCFG);
		ConcreteConstant falseconstant = new ConcreteConstant(0, mCFG);

		// variables
		Variable v1 = new Variable("v1", mCFG);
		Variable v2 = new Variable("v2", mCFG);
		Variable v3 = new Variable("v3", mCFG);
		Variable v4 = new Variable("v4", mCFG);
		Variable v5 = new Variable("v5", mCFG);
		Variable v6 = new Variable("v6", mCFG);
		Variable v7 = new Variable("v7", mCFG);
		Variable v8 = new Variable("v8", mCFG);
		Variable v9 = new Variable("v9", mCFG);
		Variable v10 = new Variable("v10", mCFG);
		Variable v14 = new Variable("v14", mCFG);

		// ----------------------------------------------------------------------

		// CFGBasicBlockNode B = new CFGBasicBlockNode("B", mCFG);
		// mCFG.addBasicBlockNode(B);

		CFGBasicBlockNode C = new CFGBasicBlockNode("C", mCFG);
		Variable i1 = new Variable("i1", mCFG);
		Input ip1 = new Input(mCFG);
		C.addStatement(new Statement(mCFG, i1, ip1));

		Variable i2 = new Variable("i2", mCFG);
		Input ip2 = new Input(mCFG);
		C.addStatement(new Statement(mCFG, i2, ip2));

		Variable i3 = new Variable("i3", mCFG);
		Input ip3 = new Input(mCFG);
		C.addStatement(new Statement(mCFG, i3, ip3));

		Variable i4 = new Variable("i4", mCFG);
		Input ip4 = new Input(mCFG);
		C.addStatement(new Statement(mCFG, i4, ip4));

		// ----------------------------------------------------------------------

		EqualsExpression exp1 = new EqualsExpression(mCFG, i1, constant1);
		CFGDecisionNode D = new CFGDecisionNode("D", mCFG, exp1);
		mCFG.addDecisionNode(D);

		CFGBasicBlockNode E = new CFGBasicBlockNode("E", mCFG);
		E.addStatement(new Statement(mCFG, v1, trueconstant));
		mCFG.addBasicBlockNode(E);

		CFGBasicBlockNode F = new CFGBasicBlockNode("F", mCFG);
		F.addStatement(new Statement(mCFG, v1, falseconstant));
		mCFG.addBasicBlockNode(F);

		EqualsExpression exp2 = new EqualsExpression(mCFG, i3, constant2);
		CFGDecisionNode G = new CFGDecisionNode("G", mCFG, exp2);
		mCFG.addDecisionNode(G);

		CFGBasicBlockNode H = new CFGBasicBlockNode("H", mCFG);
		H.addStatement(new Statement(mCFG, v3, trueconstant));
		mCFG.addBasicBlockNode(H);

		CFGBasicBlockNode I = new CFGBasicBlockNode("I", mCFG);
		I.addStatement(new Statement(mCFG, v3, falseconstant));
		mCFG.addBasicBlockNode(I);

		EqualsExpression exp3 = new EqualsExpression(mCFG, i2, constant3);
		CFGDecisionNode J = new CFGDecisionNode("J", mCFG, exp3);
		mCFG.addDecisionNode(J);

		CFGBasicBlockNode K = new CFGBasicBlockNode("K", mCFG);
		K.addStatement(new Statement(mCFG, v4, trueconstant));
		mCFG.addBasicBlockNode(K);

		CFGBasicBlockNode L = new CFGBasicBlockNode("L", mCFG);
		L.addStatement(new Statement(mCFG, v4, falseconstant));
		mCFG.addBasicBlockNode(L);

		EqualsExpression exp4 = new EqualsExpression(mCFG, i2, constant4);
		CFGDecisionNode M = new CFGDecisionNode("M", mCFG, exp4);
		mCFG.addDecisionNode(M);

		CFGBasicBlockNode N = new CFGBasicBlockNode("N", mCFG);
		N.addStatement(new Statement(mCFG, v5, trueconstant));
		mCFG.addBasicBlockNode(N);

		CFGBasicBlockNode O = new CFGBasicBlockNode("O", mCFG);
		O.addStatement(new Statement(mCFG, v5, falseconstant));
		mCFG.addBasicBlockNode(O);

		EqualsExpression exp5 = new EqualsExpression(mCFG, i3, i4);
		CFGDecisionNode P = new CFGDecisionNode("P", mCFG, exp5);
		mCFG.addDecisionNode(P);

		CFGBasicBlockNode Q = new CFGBasicBlockNode("Q", mCFG);
		Q.addStatement(new Statement(mCFG, v2, trueconstant));
		mCFG.addBasicBlockNode(Q);

		CFGBasicBlockNode R = new CFGBasicBlockNode("R", mCFG);
		R.addStatement(new Statement(mCFG, v2, falseconstant));
		mCFG.addBasicBlockNode(R);

		CFGBasicBlockNode S = new CFGBasicBlockNode("S", mCFG);
		S.addStatement(new Statement(mCFG, v6, new AddExpression(mCFG, v4, v5)));
		S.addStatement(new Statement(mCFG, v7, new AddExpression(mCFG, v2,
				new AddExpression(mCFG, v3, v6))));
		// making C6 = true
		S.addStatement(new Statement(mCFG, v9, new AddExpression(mCFG, v6,
				trueconstant)));
		S.addStatement(new Statement(mCFG, v10, new AddExpression(mCFG, v1, v7)));
		mCFG.addBasicBlockNode(S);
		// Since it is an 'or' expression expected, v10 > 1 for it to be true.
		GreaterThanExpression exp6 = new GreaterThanExpression(mCFG, v10,
				trueconstant);
		CFGDecisionNode T = new CFGDecisionNode("T", mCFG, exp6);
		mCFG.addDecisionNode(T);

		CFGBasicBlockNode U = new CFGBasicBlockNode("U", mCFG);
		U.addStatement(new Statement(mCFG, v14, constant5));
		mCFG.addBasicBlockNode(U);

		GreaterThanExpression exp7 = new GreaterThanExpression(mCFG, v9,
				trueconstant);
		CFGDecisionNode V = new CFGDecisionNode("V", mCFG, exp7);
		mCFG.addDecisionNode(V);

		CFGBasicBlockNode W = new CFGBasicBlockNode("W", mCFG);
		W.addStatement(new Statement(mCFG, v14, constant7));
		mCFG.addBasicBlockNode(W);

		CFGBasicBlockNode X = new CFGBasicBlockNode("X", mCFG);
		X.addStatement(new Statement(mCFG, v14, constant8));
		mCFG.addBasicBlockNode(X);

		// Add Edges
		// ICFEdge e1 = new CFEdge("AB", mCFG, A, B);
		// ICFEdge e2 = new CFEdge("BC", mCFG, B, C);
		ICFEdge AC = new CFEdge("AC", mCFG, A, C);
		ICFEdge e3 = new CFEdge("CD", mCFG, C, D);
		ICFEdge e4 = new CFEdge("DE", mCFG, D, E);
		ICFEdge e5 = new CFEdge("DF", mCFG, D, F);
		ICFEdge e6 = new CFEdge("EG", mCFG, E, G);
		ICFEdge e7 = new CFEdge("FG", mCFG, F, G);
		ICFEdge e8 = new CFEdge("GH", mCFG, G, H);
		ICFEdge e9 = new CFEdge("GI", mCFG, G, I);
		ICFEdge e10 = new CFEdge("HJ", mCFG, H, J);
		ICFEdge e11 = new CFEdge("IJ", mCFG, I, J);
		ICFEdge e12 = new CFEdge("JK", mCFG, J, K);
		ICFEdge e13 = new CFEdge("JL", mCFG, J, L);
		ICFEdge e14 = new CFEdge("KM", mCFG, K, M);
		ICFEdge e15 = new CFEdge("LM", mCFG, L, M);
		ICFEdge e16 = new CFEdge("MN", mCFG, M, N);
		ICFEdge e17 = new CFEdge("MO", mCFG, M, O);
		ICFEdge e18 = new CFEdge("NP", mCFG, N, P);
		ICFEdge e19 = new CFEdge("OP", mCFG, O, P);
		ICFEdge e20 = new CFEdge("PQ", mCFG, P, Q);
		ICFEdge e21 = new CFEdge("PR", mCFG, P, R);
		ICFEdge e22 = new CFEdge("QS", mCFG, Q, S);
		ICFEdge e23 = new CFEdge("RS", mCFG, R, S);
		ICFEdge e24 = new CFEdge("ST", mCFG, S, T);
		ICFEdge e25 = new CFEdge("TU", mCFG, T, U);
		ICFEdge e26 = new CFEdge("TV", mCFG, T, V);
		ICFEdge e27 = new CFEdge("VW", mCFG, V, W);
		ICFEdge e28 = new CFEdge("VX", mCFG, V, X);
		ICFEdge e29 = new CFEdge("UY", mCFG, U, Y);
		ICFEdge e30 = new CFEdge("WY", mCFG, W, Y);
		ICFEdge e31 = new CFEdge("XY", mCFG, X, Y);

		// ICFEdge e18 = new CFEdge("NY", mCFG, N,Y);
		// ICFEdge e19 = new CFEdge("OY", mCFG, O,Y);
		ICFEdge e32 = new CFEdge("YA", mCFG, Y, A);

		mCFG.addEdge(AC);
		// mCFG.addEdge(e2);
		mCFG.addEdge(e3);
		mCFG.addEdge(e4);
		mCFG.addEdge(e5);
		mCFG.addEdge(e6);
		mCFG.addEdge(e7);
		mCFG.addEdge(e8);
		mCFG.addEdge(e9);
		mCFG.addEdge(e10);
		mCFG.addEdge(e11);
		mCFG.addEdge(e12);
		mCFG.addEdge(e13);
		mCFG.addEdge(e14);
		mCFG.addEdge(e15);
		mCFG.addEdge(e16);
		mCFG.addEdge(e17);
		mCFG.addEdge(e18);
		mCFG.addEdge(e19);
		mCFG.addEdge(e20);
		mCFG.addEdge(e21);
		mCFG.addEdge(e22);
		mCFG.addEdge(e23);
		mCFG.addEdge(e24);
		mCFG.addEdge(e25);
		mCFG.addEdge(e26);
		mCFG.addEdge(e27);
		mCFG.addEdge(e28);
		mCFG.addEdge(e29);
		mCFG.addEdge(e30);
		mCFG.addEdge(e31);
		mCFG.addEdge(e32);

		// decision edges
		D.setThenEdge(e4);
		D.setElseEdge(e5);
		G.setThenEdge(e8);
		G.setElseEdge(e9);
		J.setThenEdge(e12);
		J.setElseEdge(e13);
		M.setThenEdge(e16);
		M.setElseEdge(e17);
		P.setThenEdge(e21);
		P.setElseEdge(e20);
		T.setThenEdge(e25);
		T.setElseEdge(e26);
		V.setThenEdge(e27);
		V.setElseEdge(e28);

		Set<ICFEdge> targets = new HashSet<ICFEdge>();
		targets.add(e4);
		targets.add(e8);
		targets.add(e12);
		// targets.add(e13);
		targets.add(e16);
		targets.add(e20);
		targets.add(e25);

		SymTest st = new SymTest(mCFG, targets);
		TestSequence seq = st.generateTestSequence();
		Map<Variable, List<Object>> testseq = seq.getTestSequence();

	}

}
